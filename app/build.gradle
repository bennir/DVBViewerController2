buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:0.12.+'
        classpath 'org.robolectric:robolectric-gradle-plugin:0.11.+'
    }
}

allprojects {
    repositories {
        mavenCentral()
    }
}

apply plugin: 'com.android.application'
apply plugin: 'robolectric'

configurations {
    patch
}

android {
    compileSdkVersion 21
    buildToolsVersion '20.0.0'

    defaultConfig {
        applicationId "de.bennir.dvbviewercontroller2"
        minSdkVersion 15
        targetSdkVersion 21
        versionCode 1
        versionName '1.0'
        testInstrumentationRunner "com.google.android.apps.common.testing.testrunner.GoogleInstrumentationTestRunner"
    }

    buildTypes {
        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        androidTest {
            setRoot('src/test')
        }
    }
}

robolectric {
    include '**/*Test.class'
    exclude '**/espresso/**/*.class'
}

dependencies {
    // Espresso
    androidTestCompile files('lib/espresso-1.1.jar', 'lib/testrunner-1.1.jar', 'lib/testrunner-runtime-1.1.jar')
    androidTestCompile 'com.google.guava:guava:14.0.1'
    androidTestCompile 'org.hamcrest:hamcrest-integration:1.1'
    androidTestCompile 'org.hamcrest:hamcrest-core:1.1'
    androidTestCompile 'org.hamcrest:hamcrest-library:1.1'

    androidTestCompile('junit:junit:4.11') {
        exclude module: 'hamcrest-core'
    }
    androidTestCompile('org.robolectric:robolectric:2.3') {
        exclude module: 'classworlds'
        exclude module: 'commons-logging'
        exclude module: 'httpclient'
        exclude module: 'maven-artifact'
        exclude module: 'maven-artifact-manager'
        exclude module: 'maven-error-diagnostics'
        exclude module: 'maven-model'
        exclude module: 'maven-project'
        exclude module: 'maven-settings'
        exclude module: 'plexus-container-default'
        exclude module: 'plexus-interpolation'
        exclude module: 'plexus-utils'
        exclude module: 'wagon-file'
        exclude module: 'wagon-http-lightweight'
        exclude module: 'wagon-provider-api'
    }
    androidTestCompile 'com.squareup:fest-android:1.0.+'

    compile fileTree(dir: 'libs', include: ['*.jar'])


    patch 'com.squareup.okio:okio:1.0.0'
    patch 'com.googlecode.jarjar:jarjar:1.3'
    patch 'com.squareup.okhttp:okhttp:2.0.0'
    patch 'com.squareup.okhttp:okhttp-urlconnection:2.0.0'
    compile 'com.android.support:cardview-v7:+'
    compile 'com.google.code.gson:gson:2.2.4'
    compile 'com.squareup.retrofit:retrofit:1.6.+'
    compile 'com.android.support:support-v4:21.0.+'
    compile 'com.github.johnkil.android-progressfragment:progressfragment-native:1.4.+'
    compile 'com.squareup.picasso:picasso:2.3.3'
}

project.ext.set("shouldBuildPatch",
        {
            !new File('lib/okhttp-urlconnection-2.0.0.patched.jar').exists(
            )
        })

task downloadPatchLibs(type: Copy) {
    into('lib')
    from(configurations.patch)
    exclude('jarjar*')
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}
downloadPatchLibs.doFirst {
    if (!shouldBuildPatch()) {
        throw new StopExecutionException
                ()
    }
}

task applyPatch(dependsOn: 'downloadPatchLibs') << {
    if (shouldBuildPatch()) {
        project.ant {
            taskdef name: "jarjar", classname: "com.tonicsystems.jarjar.JarJarTask", classpath: configurations.patch.asPath
            jarjar(jarfile: 'libs/okhttp-urlconnection-2.0.0.patched.jar', filesetmanifest: "merge") {
                zipfileset(src: 'libs/okio-1.0.0.jar')
                zipfileset(src: 'libs/okhttp-2.0.0.jar')
                zipfileset(src: 'libs/okhttp-urlconnection-2.0.0.jar')
                rule pattern: "okio.**", result: "custom.okio.@1"
            }
        }
    }
}

task cleanupDownloadPatchLibs(type: Delete, dependsOn: 'applyPatch') {
    delete 'lib/okio-1.0.0.jar'
    delete 'lib/okhttp-2.0.0.jar'
    delete 'lib/okhttp-urlconnection-2.0.0.jar'
}

assemble.dependsOn(cleanupDownloadPatchLibs)

task cleanPatch(type: Delete) {
    delete 'lib'
}
clean.dependsOn(cleanPatch)

apply plugin: 'idea'

idea {
    module {
        testOutputDir = file('build/test-classes/debug')
    }
}
